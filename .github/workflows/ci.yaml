name: CI
on:
  push:
    paths:
      - .github/workflows/ci.yaml
      - "firmware/**"
  pull_request:
    paths:
      - .github/workflows/ci.yaml
      - "firmware/**"
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: riscv32imc-unknown-none-elf
          components: clippy, rustfmt
      - name: Check out repository
        uses: actions/checkout@v5
      - name: Cache cargo data
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
          # intentionally not caching `target` here yet
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check formatting
        run: cargo fmt --all --check
        working-directory: firmware
      - name: Clippy
        run: cargo clippy --workspace --all-targets -- --deny warnings --allow deprecated
        working-directory: firmware

  build:
    name: Build
    needs: [check]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - riscv32imc-unknown-none-elf
    steps:
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Check out repository
        uses: actions/checkout@v5
      - name: Cache cargo data
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/git
            ~/.cargo/registry
          # intentionally not caching `target` here yet
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build everything
        run: cargo build --workspace --all-targets --release
        working-directory: firmware
      - name: Copy ELF file
        run: cp target/${{ matrix.target }}/release/touch-n-drink target/release/touch-n-drink-${{ matrix.target }}.elf
        working-directory: firmware
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: touch-n-drink-${{ matrix.target }}
          path: |
            firmware/target/release/touch-n-drink-${{ matrix.target }}.elf
          if-no-files-found: error

  image:
    name: Image
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { target: riscv32imc-unknown-none-elf, chip: esp32c3 }
    steps:
      - name: Cache espflash
        id: cache-espflash
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/espflash
          key: ${{ runner.os }}-espflash
      - name: Install dependencies
        if: steps.cache-espflash.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install pkg-config libudev-dev
      - name: Install espflash
        if: steps.cache-espflash.outputs.cache-hit != 'true'
        # FIXME: pin espflash to 3.3.0 until images are built with proper esp-idf app descriptor
        run: cargo install espflash@3.3.0
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            firmware/espflash.toml
            firmware/partitions.csv
      - name: Download build artifact
        uses: actions/download-artifact@v5
        with:
          name: touch-n-drink-${{ matrix.target }}
          path: firmware/images
      - name: Generate OTA image
        run: |
          espflash save-image --chip ${{ matrix.chip }} images/touch-n-drink-${{ matrix.target }}.elf images/touch-n-drink-${{ matrix.chip }}.bin
          cd images && shasum -a 256 touch-n-drink-${{ matrix.chip }}.bin >touch-n-drink-${{ matrix.chip }}.sha256
        working-directory: firmware
      - name: Generate factory image
        run: |
          espflash save-image --chip ${{ matrix.chip }} --merge --skip-padding --partition-table partitions.csv images/touch-n-drink-${{ matrix.target }}.elf images/touch-n-drink-${{ matrix.chip }}.factory.bin
          cd images && shasum -a 256 touch-n-drink-${{ matrix.chip }}.factory.bin >touch-n-drink-${{ matrix.chip }}.factory.sha256
        working-directory: firmware
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: touch-n-drink-${{ matrix.chip }}
          path: |
            firmware/images/touch-n-drink-*.bin
            firmware/images/touch-n-drink-*.sha256
          if-no-files-found: error

  release:
    name: Release
    permissions:
      contents: write
    needs: [image]
    if: github.repository == 'zargony/touch-n-drink' && startsWith(github.ref, 'refs/tags/firmware-')
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          sparse-checkout: |
            firmware/CHANGELOG.md
      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          path: firmware/images
          merge-multiple: true
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: firmware/CHANGELOG.md
          draft: true
          files: |
            firmware/images/touch-n-drink-*.bin
            firmware/images/touch-n-drink-*.sha256
          fail_on_unmatched_files: true
